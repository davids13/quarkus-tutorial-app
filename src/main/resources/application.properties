greeting=Hello y'all!

# database configuration
# h2
#quarkus.datasource.jdbc.url=jdbc:h2:mem:default
#quarkus.datasource.db-kind=h2
#quarkus.hibernate-orm.database.generation=drop-and-create
#quarkus.hibernate-orm.sql-load-script=import.sql
# postgresql
quarkus.datasource.db-kind=postgresql
quarkus.hibernate-orm.database.generation=drop-and-create

# REST Client properties
com.redhat.developers.FruityViceService/mp-rest/url=https://fruityvice.com

# Health Check (modify the default path)
# quarkus.smallrye-health.root-path=/health

# Security
mp.jwt.verify.publickey.location=https://raw.githubusercontent.com/redhat-developer-demos/quarkus-tutorial/master/jwt-token/quarkus.jwt.pub
mp.jwt.verify.issuer=https://quarkus.io/using-jwt-rbac
#set jwt expiration duration
#com.developers.redhat.jwt.duration=3600

# Reactive
org.acme.BeerService/mp-rest/url=https://api.punkapi.com

# Kafka
mp.messaging.outgoing.messages.connector=smallrye-kafka
mp.messaging.outgoing.messages.topic=pricedbeers

# enable dev
%dev.m2m=
# enable test
%test.m2m=
# enable prod
%prod.m2m=

### CLIENT BASIC AUTH
quarkus.http.auth.basic=true
quarkus.security.users.embedded.enabled=true
quarkus.security.users.embedded.plain-text=true

quarkus.security.users.embedded.users.john=secret1
quarkus.security.users.embedded.roles.john=admin,user

quarkus.http.port=9090

mp.messaging.incoming.bookings.connector=smallrye-kafka
mp.messaging.incoming.bookings.topic=bookings
mp.messaging.incoming.bookings.group.id=demo
mp.messaging.incoming.bookings.key.deserializer=org.apache.kafka.common.serialization.LongDeserializer
mp.messaging.incoming.bookings.value.deserializer=com.bmwgroup.back2code.BookingDeserializer

mp.messaging.connector.smallrye-kafka.bootstrap.servers=kafka-service-campus-trainer.cnap-00-mp-dev2.bmwgroup.net:443
mp.messaging.connector.smallrye-kafka.security.protocol=SSL
mp.messaging.connector.smallrye-kafka.ssl.truststore.location=classes/certificates/bmw-truststore.jks
#mp.messaging.connector.smallrye-kafka.ssl.truststore.password=

quarkus.ssl.native=true
quarkus.native.enable-all-security-services=true

quarkus.mongodb.devservices.image-name=mongodb/mongodb-community-server:7.0.3-ubi8

quarkus.mongodb.database=my_movie_db
%prod.quarkus.mongodb.connection-string=mongodb://mongodb:27017

quarkus.liquibase-mongodb.change-log=mongo/import.xml
quarkus.liquibase-mongodb.migrate-at-start=true

quarkus.container-image.image=quay.io/hgrahsl/my-quarkus-mongodb-app:2.0.0

quarkus.kubernetes.env.mapping.quarkus-mongodb-connection-string.from-secret=mongodb-connection
quarkus.kubernetes.env.mapping.quarkus-mongodb-connection-string.with-key=managed
#NOTE:
# Using the 'selfhosted' key instead would, as shown below, keep using the self-hosted
# MongoDB instance deployed to/running in your Kubernetes cluster and namespace.
#quarkus.kubernetes.env.mapping.quarkus-mongodb-connection-string.with-key=selfhosted


# auth
quarkus.rest-client.\"com.redhat.developers.auth.MyServiceClient\".basic-auth.user=the_user
quarkus.rest-client.\"com.redhat.developers.auth.MyServiceClient\".basic-auth.password=the_pass


#quarkus.log.category."org.acme".level=DEBUG

# profiles
# %dev = mvn quarkus:dev | %test mvn test | %prod = java -jar | custom -Dquarkus.profile
%dev.quarkus.log.category."org.acme".level=DEBUG
# change profile mvn quarkus:dev -Dquarkus.profile=custom
%dev.book.genre=DEV
%test.book.genre=test

bank.name=Bank of America  //The default property definition
%dev.bank.name=Bank of Development // Tmvn quarkus:dev
%prod.bank.name=Bank of Production // This property definition is used when the application is started with java -jar or when running a natively compiled binary.
# run in production mode mvn package java -jar target/quarkus-app/quarkus-run.jar
%test.bank.name= Bank of Testing // mvn quarkus:test

# reference property in other property
bank-suuport={bank.name}